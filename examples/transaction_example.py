import asyncio
import json
from solana_sdk.wallet import WalletManager
from solana_sdk.transaction import send_sol, get_transaction_info  # –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –æ–¥—Ä–∞–∑—É —ñ get_transaction_info

def load_wallet(path="my_wallet.json") -> dict:
    with open(path, "r") as f:
        return json.load(f)

async def main():
    wm = WalletManager()

    # ‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ –∑ —Ñ–∞–π–ª—É
    sender_wallet = load_wallet()
    sender_secret = sender_wallet['private_key']
    sender_pubkey = sender_wallet['public_key']

    # üéØ –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–æ–≥–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
    recipient_wallet = wm.create_keypair()
    recipient_pubkey = recipient_wallet['public_key']

    print(f"üîë Sender: {sender_pubkey}")
    print(f"üéØ Recipient: {recipient_pubkey}")

    print("\nüí∞ –ë–∞–ª–∞–Ω—Å –¥–æ:")
    print("   Sender:", await wm.get_balance(sender_pubkey), "SOL")
    print("   Recipient:", await wm.get_balance(recipient_pubkey), "SOL")

    # ======= –†–ï–ê–õ–¨–ù–ê –¢–†–ê–ù–ó–ê–ö–¶–Ü–Ø (–∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞) =======
    # print("\nüí∏ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ 0.5 SOL...")
    # tx_sig = await send_sol(wm.client, sender_secret, recipient_pubkey, 0.5)
    # print("üìÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è:", tx_sig)

    # await asyncio.sleep(2)

    print("\n‚úÖ –ë–∞–ª–∞–Ω—Å –ø—ñ—Å–ª—è:")
    print("   Sender:", await wm.get_balance(sender_pubkey), "SOL")
    print("   Recipient:", await wm.get_balance(recipient_pubkey), "SOL")

    # ======= –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –∑–∞ –ø—ñ–¥–ø–∏—Å–æ–º (–º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –≤—Ä—É—á–Ω—É) =======
    example_sig = "5wkgsBSZB4E39DkostWys82ZKCa2BY87hxjLBUQM5UfnrCmZcyDz95DtwSTLRpPrcd7DRubjkKVxdULMDVViEQCz"
    tx_info = await get_transaction_info(wm.client, example_sig)
    print("\n‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é:")
    if tx_info:
        for k, v in tx_info.items():
            print(f"{k}: {v}")

    await wm.close()

if __name__ == "__main__":
    asyncio.run(main())
